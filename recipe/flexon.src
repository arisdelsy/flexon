-----------------------------ALINGTON SCALE CO.--------------------------
-------------------------------------------------------------------------
-------------------------------------------------------------------------
-----------------------------------V1.0----------------------------------


program Recipe; 
 
#include Recipe.iri 

  -- Constants and aliases definitions 
  g_csProgName          : constant string  := "Recipe"; --Program Name 
  g_csVersion           : constant string  := "1.0"; --Program Version   
  g_ciPrinter           : constant integer := 0;
  g_ciDigInOn           : constant integer := 0; --Digital Input is On 
  g_ciDigInOff          : constant integer := 1; --Digital Input is Off
  g_ciDigOutOn          : constant integer := 1; --Digital Output is On
  g_ciDigOutOff         : constant integer := 0; --Digital Output is Off  
  g_ciBackDoorPassword  : constant string  := "1234";  --Backdoor Password 
  g_ciInt32_Max         : constant integer := 2147483647;   
  g_ciMaxIngredients    : constant integer := 4;
  
  -- Inputs/Outputs  
  g_ciStartAbort    : constant integer := 1;
  g_ciEStop         : constant integer := 2;  
  g_coIngredient1   : constant integer := 3;
  g_coIngredient2   : constant integer := 4;
  g_coIngredient3   : constant integer := 5;
  g_coIngredient4   : constant integer := 6;
  g_coDischarge     : constant integer := 7;  

  -- Screens
  g_ciMain    : constant integer := 1;
  g_ciSetup   : constant integer := 9; 
  g_ciIOTest  : constant integer := 4;    
  
  -- Operation Modes
  LockMode                : constant integer := 0;
  NoMode                  : constant integer := 100;    
  EnterRecipeID           : constant integer := 101; 
  
  -- Setup Modes
  SetupEnterPasswordMode   : constant integer := 999;
  Setup1Mode               : constant integer := 1000; 
    SetupChangePasswordMode  : constant integer := 1100;
    SetupVerifyPasswordMode  : constant integer := 1101;
    SetupRecipeId             : constant integer := 1210;
      SetupRecipeName           : constant integer := 1211;
      SetupRecipeIngred1        : constant integer := 1212;
      SetupRecipeTarget1        : constant integer := 1213;
      SetupRecipeIngred2        : constant integer := 1214;
      SetupRecipeTarget2        : constant integer := 1215;
      SetupRecipeIngred3        : constant integer := 1216;
      SetupRecipeTarget3        : constant integer := 1217;
      SetupRecipeIngred4        : constant integer := 1218;
      SetupRecipeTarget4        : constant integer := 1219;                
    SetupDeleteRecipe         : constant integer := 1220;
    SetupIngredId             : constant integer := 1230;
      SetupIngredName           : constant integer := 1231;
      SetupIngredPreact         : constant integer := 1232;
    SetupDeleteIngred         : constant integer := 1240; 
    SetupScaleEmptyWeightMode  : constant integer := 1300;
    SetupScaleDischargeTimeMode : constant integer := 1301; 
  Setup2Mode                     : constant integer :=  2000; 	

  EntryMode : integer; 

  -- Batch Modes     
  Complete               : constant integer := 50000;
  WaitSSTare             : constant integer := 50001;
  Filling                : constant integer := 50002;  
  WaitSSFull             : constant integer := 50003;
  Discharging            : constant integer := 50004;
  DischargeDelay         : constant integer := 50005; 
  
  BatchMode : integer; 
  type Pausedmode is (Yes, No);
  Paused : PausedMode;

  Blank : constant string := "";      
  type boolean is (False,True); 

  -- Global/Types variables definitions 
  g_sSetupPassword : stored string;
  g_iDownload : stored integer;
  g_sTmpPassword : string;  
  g_rCountby : real;    
  g_bUpdate : boolean;
  g_iDecimal1 : integer;  
  g_uUnits : Units; 
  g_sysResult : SysCode;   
  g_iDebug : integer;
  g_rScaleEmptyWeight : stored real;
  g_rScaleDischargeTime : stored real;
  g_iRecipeId : stored integer;  
  g_iTotalNbrIngredients : integer;    
  g_iCurrentIngredient : integer;    
  g_iDelayCnt : integer; 
  g_iWidget : integer;    

  type RecipeRecord is
    record 
      iRecipeId : integer;
      sRecipeName : string; 
      iIngredientId : integer;
      sIngredientName : string;  
      rTargetWgt : real;    
      rPreactWgt : real;
      rActualWgt : real;      
    end record;   

  type RecipeArrays is array [4] of RecipeRecord;
  -- Database display array
  g_arRecipe : stored RecipeArrays;   
       
  IngredDB : IngredDatabase;
  RecipeDB : RecipeDatabase;   

    procedure SetupStartTimer(iTimer : integer; iDuration : integer; itmMode : TimerMode);  -- Setup a Timer and Start                                
  begin
  
    SetTimer(iTimer, iDuration);
    SetTimerMode(iTimer, itmMode);
    StartTimer(iTimer);
    
  end;     
  
  procedure DisableSetPoints;
  begin
    
    DisableSP(1);
    DisableSP(2);
    
  end;

  function GetCurrentUnitsString(s : integer) : string;  -- Gets current units string (lb/kg/etc). 
    sUnit : Units;
    sUnitString : string;  
  begin          
    
    if GetUnits(s, sUnit) = SysOk then
      GetUnitsString(s, sUnit, sUnitString);    
    else
      sUnitString := Blank;
    end if; 
    
    return sUnitString; 
    
  end;    

  procedure PrintTicket; 
		sUnits : string;
  begin  

    sUnits := GetCurrentUnitsString(1);    

		SetPrintText(1, TransDB.ItemId);
		SetPrintText(2, TransDB.ItemName);
		SetPrintText(3, RealToString(TransDB.Weight,0,g_iDecimal1) + " " + sUnits);
		SetPrintText(4, TransDB.Status);
		SetPrintText(5, Date$(TransDB.DT));
		SetPrintText(6, Time$(TransDB.DT));
		Print(AuxFmt1);
  end;     

  procedure LockMajorKeys;  -- Locks ZERO, GROSS/NET, TARE, UNITS and PRINT key
  begin
  
    LockKey(GrossNetKey);
    LockKey(TareKey);
    LockKey(UnitsKey);
    LockKey(PrintKey);
    
  end; 

  procedure UnLockMajorKeys;  -- UnLocks ZERO, GROSS/NET, TARE, UNITS and PRINT key
  begin
  
    UnlockKey(GrossNetKey);
    UnlockKey(TareKey);
    UnlockKey(UnitsKey);
    UnlockKey(PrintKey);
    
  end;   

  procedure LockAllKeys; -- Lock All Keys
  begin
    LockMajorKeys;
  end;

  procedure PromptForEntry(sPrompt : string;  iMode : integer; sDefault : string; iType : integer);  -- Prompts operator for data
  begin
    
    DisableHandler(NumericKeyPressed);
    DisableHandler(EnterKeyPressed);
    DisableHandler(NavUpKeyPressed);
    DisableHandler(NavDownKeyPressed);   
    
    LockMajorKeys;
 
		SetEntry(sDefault);
    if iType = 0 then
      PromptUser(sPrompt);
    elsif iType = 1 then  
      PromptPassword(sPrompt);
    elsif iType = 2 then
      PromptNumeric(sPrompt);
    end if;
    EntryMode := iMode;
    
  end;      

  